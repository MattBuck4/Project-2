{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "41f6fd2b",
   "metadata": {},
   "outputs": [],
   "source": [
    "#!pip install covid\n",
    "#!pip install iso3166\n",
    "#!pip install covid19dh\n",
    "#!pip install streamlit"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "94943660",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[nltk_data] Downloading package vader_lexicon to\n",
      "[nltk_data]     /Users/mattbuchanan/nltk_data...\n",
      "[nltk_data]   Package vader_lexicon is already up-to-date!\n"
     ]
    }
   ],
   "source": [
    "#https://ahmednafies.github.io/covid/\n",
    "#!pip install covid\n",
    "\n",
    "# Initial imports\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')\n",
    "import os\n",
    "import plotly\n",
    "import requests\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from dotenv import load_dotenv\n",
    "# Initialize the Panel Extensions (for Plotly)\n",
    "import panel as pn\n",
    "import param\n",
    "pn.extension('plotly')\n",
    "pn.extension()\n",
    "import hvplot.pandas\n",
    "import matplotlib.pyplot as plt\n",
    "import os\n",
    "from pathlib import Path\n",
    "from dotenv import load_dotenv\n",
    "import ipywidgets as widgets\n",
    "from IPython.display import display\n",
    "%matplotlib inline\n",
    "import datetime as dt\n",
    "import streamlit as st\n",
    "\n",
    "\n",
    "import nltk as nltk\n",
    "nltk.download('vader_lexicon')\n",
    "from nltk.sentiment.vader import SentimentIntensityAnalyzer\n",
    "analyzer = SentimentIntensityAnalyzer()\n",
    "from newsapi import NewsApiClient\n",
    "%matplotlib inline\n",
    "\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "from keras.models import load_model"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9cc0fd5a",
   "metadata": {},
   "source": [
    "### Global Parameters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "91ac434d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Set the random seed for reproducibility\n",
    "# Note: This is used for model prototyping, but it is good practice to comment this out and run multiple experiments to evaluate your model.\n",
    "from numpy.random import seed\n",
    "seed(1)\n",
    "from tensorflow import random\n",
    "random.set_seed(2)\n",
    "\n",
    "# Establish API \n",
    "api_key = \"f49e8065af064801ba16d9322ddcca43\"\n",
    "newsapi = NewsApiClient(api_key=api_key)\n",
    "vaccine_array = [\"Pfizer\", \"Moderna\", \"Janssen\", \"Johnson&Johnson\", \"Sinopharm\", \"Vero Cell\", \"Sputnik V\", \"Sinovac\"]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "db55709c",
   "metadata": {},
   "outputs": [],
   "source": [
    "def download_fully_vacinated_data(country):\n",
    "    url=\"https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/vaccinations/vaccinations.csv\"\n",
    "    df=pd.read_csv(url)\n",
    "    # Set the Date column to datetime format\n",
    "    df[\"date\"] = pd.to_datetime(df[\"date\"])\n",
    "    df = df[[\"date\", \"location\", \"people_fully_vaccinated_per_hundred\"]]\n",
    "    df = df.set_index('date')\n",
    "    df = df.dropna()\n",
    "    data = df.groupby('location')\n",
    "    return data.get_group(country)\n",
    "\n",
    "def download_vacination_data(country):\n",
    "    url=\"https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/vaccinations/vaccinations.csv\"\n",
    "    df=pd.read_csv(url)\n",
    "    # Set the Date column to datetime format\n",
    "    df[\"date\"] = pd.to_datetime(df[\"date\"])\n",
    "    df = df[[\"date\", \"location\", \"people_vaccinated_per_hundred\"]]\n",
    "    df = df.set_index('date')\n",
    "    df = df.dropna()\n",
    "    data = df.groupby('location')\n",
    "    return data.get_group(country)\n",
    "\n",
    "def download_covid_new_cases(country):\n",
    "    url=\"https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/owid-covid-data.csv\"\n",
    "    df=pd.read_csv(url)\n",
    "    df[\"date\"] = pd.to_datetime(df[\"date\"])\n",
    "    df = df[[\"date\", \"location\", \"new_cases\"]]\n",
    "    df = df.set_index(\"date\")\n",
    "    df = df.dropna()\n",
    "    df = df.loc[:, (df != 0).any(axis=0)]\n",
    "    data = df.groupby('location')\n",
    "    return data.get_group(country)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "38a53347",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0e387c82",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "72401cf0",
   "metadata": {},
   "source": [
    "#### Create the Features `X` and Target `y` Data\n",
    "\n",
    "Use the `window_data()` function bellow, to create the features set `X` and the target vector `y`. Define a window size of `30` days and use the column of \"people_vaccinated_per_hundred\" and \"people_fully_vaccinated_per_hundred\" as feature and target column; this will allow the model to predict vaccination date."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "7526f98a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Scale Data\n",
    "def scale_train_data(df):\n",
    "    # Use the MinMaxScaler to scale data between 0 and 1.\n",
    "    scaler = MinMaxScaler()   \n",
    "    scaler = MinMaxScaler(feature_range=(0, 1))\n",
    "    \n",
    "    for col in df.columns:\n",
    "        if col == \"new_cases\":\n",
    "            df[[\"new_cases\"]] = scaler.fit_transform(df[[\"new_cases\"]])\n",
    "        if col == \"people_fully_vaccinated_per_hundred\":\n",
    "            df[[\"people_fully_vaccinated_per_hundred\"]] = scaler.fit_transform(df[[\"people_fully_vaccinated_per_hundred\"]])\n",
    "        if col == \"people_vaccinated_per_hundred\":\n",
    "            df[[\"people_vaccinated_per_hundred\"]] = scaler.fit_transform(df[[\"people_vaccinated_per_hundred\"]])\n",
    "        \n",
    "    return df, scaler\n",
    "\n",
    "def scale_test_data(df, scaler):\n",
    "    for col in df.columns:\n",
    "        if col == \"new_cases\":\n",
    "            df[[\"new_cases\"]] = scaler.transform(df[[\"new_cases\"]])\n",
    "        if col == \"people_fully_vaccinated_per_hundred\":\n",
    "            df[[\"people_fully_vaccinated_per_hundred\"]] = scaler.fit_transform(df[[\"people_fully_vaccinated_per_hundred\"]])\n",
    "        if col == \"people_vaccinated_per_hundred\":\n",
    "            df[[\"people_vaccinated_per_hundred\"]] = scaler.fit_transform(df[[\"people_vaccinated_per_hundred\"]])\n",
    "    \n",
    "    return df\n",
    "\n",
    "\n",
    "def split_train_test(df):    \n",
    "    train_size  = int(0.7 * len(df))\n",
    "    test_size = len(df) - train_size\n",
    "    \n",
    "    train = df[: train_size]\n",
    "    test = df[train_size:]\n",
    "    \n",
    "    return train, test\n",
    "\n",
    "# This function accepts the column number for the features (X) and the target (y)\n",
    "# It chunks the data up with a rolling window of Xt-n to predict Xt\n",
    "# It returns a numpy array of X any y\n",
    "def window_data(df, window, feature_col_number, target_col_number):\n",
    "    \n",
    "    X = []\n",
    "    y = []\n",
    "\n",
    "    for i in range(len(df) - window - 1):\n",
    "        features = df.iloc[i:(i + window), feature_col_number]\n",
    "        target = df.iloc[(i + window), target_col_number]\n",
    "        X.append(features)\n",
    "        y.append(target)\n",
    "    return np.array(X), np.array(y)\n",
    "\n",
    "def reshape_data(X_train, X_test):\n",
    "    X_train = np.reshape(X_train, (X_train.shape[0], 1, X_train.shape[1]))\n",
    "    X_test = np.reshape(X_test, (X_test.shape[0], 1, X_test.shape[1]))\n",
    "    return X_train, X_test\n",
    "\n",
    "# Build the LSTM model. \n",
    "def lstm_model_ini(X_train, y_train, window, epochs, batch_size):\n",
    "    from tensorflow.keras.models import Sequential\n",
    "    from tensorflow.keras.layers import LSTM, Dense, Dropout\n",
    "    model = Sequential()\n",
    "    number_units = 10\n",
    "    \n",
    "    model.add(LSTM(number_units, input_shape=(1, window)))\n",
    "    \n",
    "    # Output layer\n",
    "    model.add(Dense(units=1))\n",
    "    # Compile the model\n",
    "    model.compile(optimizer=\"adam\", loss=\"mean_squared_error\")\n",
    "    \n",
    "    model.fit(X_train, y_train, epochs=epochs, shuffle=False, batch_size=batch_size, verbose=0)\n",
    "    model.reset_states()\n",
    "    return model\n",
    "\n",
    "def test_prediction(df, model, X_test, y_test, scaler):\n",
    "    predicted = model.predict(X_test)\n",
    "    predicted_value = scaler.inverse_transform(predicted)\n",
    "    real_value = scaler.inverse_transform(y_test.reshape(-1, 1))\n",
    "    compare_df = pd.DataFrame({\n",
    "                \"Real\": real_value.ravel(),\n",
    "                \"Predicted\": predicted_value.ravel()}, index = df.index[-len(real_value): ]) \n",
    "    return compare_df\n",
    "\n",
    "def create_model(df):\n",
    "    # Split train-test\n",
    "    train, test = split_train_test(df)\n",
    "    \n",
    "    # Scale the data:\n",
    "    train, scaler = scale_train_data(train)\n",
    "    test = scale_test_data(test, scaler)\n",
    "    \n",
    "    X_train, y_train = window_data(train, window, 1,1)\n",
    "    X_test, y_test = window_data(test, window, 1,1)\n",
    "        \n",
    "    X_train, X_test = reshape_data(X_train, X_test)\n",
    "\n",
    "    # Create LTSM Model\n",
    "    model = lstm_model_ini(X_train, y_train, window, epochs, batch_size)\n",
    "    model.evaluate(X_test, y_test, verbose=0)\n",
    "    # Test the model\n",
    "    compare_df = test_prediction(df, model, X_test, y_test, scaler)\n",
    "    plot = compare_df.hvplot(title=\"Model Performance\")\n",
    "    model.reset_states()\n",
    "    return model, scaler, compare_df, plot\n",
    "\n",
    "\n",
    "def scale_main_data(df):\n",
    "    scaler = MinMaxScaler(feature_range=(0, 1))\n",
    "    for col in df.columns:\n",
    "        if col == \"new_cases\":\n",
    "            df[[\"new_cases\"]] = scaler.fit_transform(df[[\"new_cases\"]])\n",
    "        if col == \"people_fully_vaccinated_per_hundred\":\n",
    "            df[[\"people_fully_vaccinated_per_hundred\"]] = scaler.fit_transform(df[[\"people_fully_vaccinated_per_hundred\"]])\n",
    "        if col == \"people_vaccinated_per_hundred\":\n",
    "            df[[\"people_vaccinated_per_hundred\"]] = scaler.fit_transform(df[[\"people_vaccinated_per_hundred\"]])    \n",
    "    return df, scaler\n",
    "def reverse_scale_data(df, scaler):\n",
    "    for col in df.columns:\n",
    "        if col == \"new_cases\":\n",
    "            df[[\"new_cases\"]] = scaler.inverse_transform(df[[\"new_cases\"]])\n",
    "        if col == \"people_fully_vaccinated_per_hundred\":\n",
    "            df[[\"people_fully_vaccinated_per_hundred\"]] = scaler.inverse_transform(df[[\"people_fully_vaccinated_per_hundred\"]])\n",
    "        if col == \"people_vaccinated_per_hundred\":\n",
    "            df[[\"people_vaccinated_per_hundred\"]] = scaler.inverse_transform(df[[\"people_vaccinated_per_hundred\"]])\n",
    "    \n",
    "    return df\n",
    "\n",
    "def predict_main_data(df, model, prediction_days):\n",
    "    \n",
    "    for i in range(prediction_days+1):\n",
    "        df, scaler = scale_main_data(df)\n",
    "\n",
    "        # Shape data of the last window period \n",
    "        latest = [df.iloc[len(df) - window: len(df),1]]\n",
    "        latest = np.array(latest)\n",
    "        latest = np.reshape(latest, (latest.shape[0], 1, latest.shape[1]))\n",
    "\n",
    "        # Make Prediction\n",
    "        pred = model.predict(latest)\n",
    "        forecast = scaler.inverse_transform(pred)[0][0]\n",
    "        #forecast = pred[0][0]\n",
    "\n",
    "        # Add to main dataframe\n",
    "        df = reverse_scale_data(df, scaler)\n",
    "        df.loc[df.index[-1] + dt.timedelta(days=1)] = [country, forecast]\n",
    "        \n",
    "    return df.hvplot()\n",
    "\n",
    "# Fetch the Covid news articles\n",
    "\n",
    "def get_news(q, language):\n",
    "    news_articles = newsapi.get_everything(q=q, language=language)\n",
    "\n",
    "    return news_articles\n",
    "\n",
    "# Sentiment DataFrames\n",
    "def create_sentiment_df(news):\n",
    "    articles = []\n",
    "    for article in news[\"articles\"]:\n",
    "        try:\n",
    "            title = article[\"title\"]\n",
    "            description = article[\"description\"]\n",
    "            text = article[\"content\"]\n",
    "            date = article[\"publishedAt\"][:10]\n",
    "            sentiment = analyzer.polarity_scores(str(title)+\" \"+str(description) +\" \"+ str(title))\n",
    "            compound = sentiment[\"compound\"]\n",
    "            pos = sentiment[\"pos\"]\n",
    "            neu = sentiment[\"neu\"]\n",
    "            neg = sentiment[\"neg\"]\n",
    "            articles.append({\n",
    "                \"title\": title,\n",
    "                \"description\": description,\n",
    "                \"text\": text,\n",
    "                \"date\": date,\n",
    "                \"compound\": compound,\n",
    "                \"positive\": pos,\n",
    "                \"negative\": neg,\n",
    "                \"neutral\": neu\n",
    "            })\n",
    "        except AttributeError:\n",
    "            pass\n",
    "    return pd.DataFrame(articles) \n",
    "\n",
    "def mean_sentiment_scores(df):\n",
    "    positive_score = df['positive'].mean()\n",
    "    negative_score = df['negative'].mean()\n",
    "    return positive_score, negative_score\n",
    "\n",
    "def create_sentiment_plot(vaccine_array, language):\n",
    "    sen_score_df = pd.DataFrame(columns=['positive', 'negative'])\n",
    "    for vac in vaccine_array:\n",
    "        news = get_news(vac, language)\n",
    "        df = create_sentiment_df(news)\n",
    "        pos, neg = mean_sentiment_scores(df)\n",
    "        sen_score_df.loc[vac] = [pos, neg]\n",
    "        plot = sen_score_df.hvplot.bar(rot=45, stacked=True, legend='right').opts(yformatter=\"%.0f\", width=800, xlabel=\"Vaccine\", ylabel=\"Sentiment Score\", title=\"Sentiment toward Vaccine types\")\n",
    "    return plot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "f8076ae8",
   "metadata": {},
   "outputs": [
    {
     "data": {},
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.holoviews_exec.v0+json": "",
      "text/html": [
       "<div id='2930'>\n",
       "\n",
       "\n",
       "\n",
       "\n",
       "\n",
       "  <div class=\"bk-root\" id=\"1c5f78be-8649-412a-8cff-e8451bd5e932\" data-root-id=\"2930\"></div>\n",
       "</div>\n",
       "<script type=\"application/javascript\">(function(root) {\n",
       "  function embed_document(root) {\n",
       "    var docs_json = {\"95baf00c-5c57-436b-9ce2-8a2b6bc9750d\":{\"defs\":[],\"roots\":{\"references\":[{\"attributes\":{},\"id\":\"3001\",\"type\":\"UnionRenderers\"},{\"attributes\":{\"margin\":[5,5,5,5],\"name\":\"HSpacer06694\",\"sizing_mode\":\"stretch_width\"},\"id\":\"2931\",\"type\":\"Spacer\"},{\"attributes\":{},\"id\":\"2971\",\"type\":\"AllLabels\"},{\"attributes\":{},\"id\":\"2967\",\"type\":\"DatetimeTickFormatter\"},{\"attributes\":{\"data\":{\"Variable\":[\"Real\",\"Real\",\"Real\",\"Real\",\"Real\",\"Real\",\"Real\",\"Real\",\"Real\",\"Real\",\"Real\",\"Real\",\"Real\",\"Real\",\"Real\",\"Real\",\"Real\",\"Real\",\"Real\",\"Real\",\"Real\",\"Real\",\"Real\",\"Real\",\"Real\",\"Real\",\"Real\",\"Real\",\"Real\",\"Real\",\"Real\",\"Real\",\"Real\",\"Real\",\"Real\",\"Real\",\"Real\",\"Real\",\"Real\",\"Real\",\"Real\",\"Real\",\"Real\",\"Real\",\"Real\",\"Real\",\"Real\",\"Real\",\"Real\",\"Real\",\"Real\",\"Real\",\"Real\",\"Real\",\"Real\",\"Real\",\"Real\",\"Real\",\"Real\",\"Real\",\"Real\",\"Real\",\"Real\",\"Real\",\"Real\",\"Real\",\"Real\",\"Real\",\"Real\"],\"date\":{\"__ndarray__\":\"AADAQKykd0IAAICm/qR3QgAAQAxRpXdCAAAAcqOld0IAAMDX9aV3QgAAgD1IpndCAABAo5qmd0IAAAAJ7aZ3QgAAwG4/p3dCAACA1JGnd0IAAEA65Kd3QgAAAKA2qHdCAADABYmod0IAAIBr26h3QgAAQNEtqXdCAAAAN4Cpd0IAAMCc0ql3QgAAgAIlqndCAABAaHeqd0IAAADOyap3QgAAwDMcq3dCAACAmW6rd0IAAED/wKt3QgAAAGUTrHdCAADAymWsd0IAAIAwuKx3QgAAQJYKrXdCAAAA/Fytd0IAAMBhr613QgAAgMcBrndCAABALVSud0IAAACTpq53QgAAwPj4rndCAACAXkuvd0IAAEDEna93QgAAACrwr3dCAADAj0Kwd0IAAID1lLB3QgAAQFvnsHdCAAAAwTmxd0IAAMAmjLF3QgAAgIzesXdCAABA8jCyd0IAAABYg7J3QgAAwL3VsndCAACAIyizd0IAAECJerN3QgAAAO/Ms3dCAADAVB+0d0IAAIC6cbR3QgAAQCDEtHdCAAAAhha1d0IAAMDraLV3QgAAgFG7tXdCAABAtw22d0IAAAAdYLZ3QgAAwIKytndCAACA6AS3d0IAAEBOV7d3QgAAALSpt3dCAADAGfy3d0IAAIB/Trh3QgAAQOWguHdCAAAAS/O4d0IAAMCwRbl3QgAAgBaYuXdCAABAfOq5d0IAAADiPLp3QgAAwEePundC\",\"dtype\":\"float64\",\"order\":\"little\",\"shape\":[69]},\"value\":{\"__ndarray__\":\"SOF6FK4nSEA9CtejcD1IQPUoXI/CVUhAj8L1KFxvSECPwvUoXI9IQFK4HoXrsUhAUrgehevRSEC5HoXrUfhIQOxRuB6FC0lApHA9CtcjSUBcj8L1KDxJQJuZmZmZWUlAuB6F61F4SUC4HoXrUZhJQAAAAAAAwElAUrgehevRSUApXI/C9ehJQIXrUbgeBUpASOF6FK4nSkDNzMzMzExKQFK4HoXrcUpAH4XrUbieSkDXo3A9CrdKQHA9Ctej0EpAzczMzMzsSkCuR+F6FA5LQHE9CtejMEtAFK5H4XpUS0Bcj8L1KHxLQFK4HoXrkUtA7FG4HoWrS0BmZmZmZsZLQIXrUbge5UtAhetRuB4FTEBmZmZmZiZMQI/C9ShcT0xApHA9CtdjTECamZmZmXlMQFK4HoXrkUxAj8L1KFyvTEBxPQrXo9BMQI/C9Shc70xAmpmZmZkZTUCuR+F6FC5NQEjhehSuR01ApHA9CtdjTUCF61G4HoVNQArXo3A9qk1A7FG4HoXLTUBSuB6F6/FNQClcj8L1CE5ApHA9CtcjTkABAAAAAEBOQOB6FK5HYU5ApHA9CteDTkCF61G4HqVOQOxRuB6Fy05A4XoUrkfhTkB7FK5H4fpOQBOuR+F6FE9AFa5H4Xo0T0BxPQrXo1BPQOxRuB6Fa09AhetRuB6FT0AUrkfhepRPQAAAAAAAoE9AuB6F61G4T0CPwvUoXM9PQGZmZmZm5k9A\",\"dtype\":\"float64\",\"order\":\"little\",\"shape\":[69]}},\"selected\":{\"id\":\"2973\"},\"selection_policy\":{\"id\":\"3001\"}},\"id\":\"2972\",\"type\":\"ColumnDataSource\"},{\"attributes\":{\"line_alpha\":0.1,\"line_color\":\"#fc4f30\",\"line_width\":2,\"x\":{\"field\":\"date\"},\"y\":{\"field\":\"value\"}},\"id\":\"3009\",\"type\":\"Line\"},{\"attributes\":{\"months\":[0,1,2,3,4,5,6,7,8,9,10,11]},\"id\":\"2995\",\"type\":\"MonthsTicker\"},{\"attributes\":{\"label\":{\"value\":\"Predicted\"},\"renderers\":[{\"id\":\"3011\"}]},\"id\":\"3037\",\"type\":\"LegendItem\"},{\"attributes\":{\"bottom_units\":\"screen\",\"fill_alpha\":0.5,\"fill_color\":\"lightgrey\",\"left_units\":\"screen\",\"level\":\"overlay\",\"line_alpha\":1.0,\"line_color\":\"black\",\"line_dash\":[4,4],\"line_width\":2,\"right_units\":\"screen\",\"syncable\":false,\"top_units\":\"screen\"},\"id\":\"2958\",\"type\":\"BoxAnnotation\"},{\"attributes\":{},\"id\":\"2973\",\"type\":\"Selection\"},{\"attributes\":{\"below\":[{\"id\":\"2945\"}],\"center\":[{\"id\":\"2948\"},{\"id\":\"2952\"}],\"height\":300,\"left\":[{\"id\":\"2949\"}],\"margin\":[5,5,5,5],\"min_border_bottom\":10,\"min_border_left\":10,\"min_border_right\":10,\"min_border_top\":10,\"renderers\":[{\"id\":\"2978\"},{\"id\":\"3011\"}],\"right\":[{\"id\":\"3002\"}],\"sizing_mode\":\"fixed\",\"title\":{\"id\":\"2937\"},\"toolbar\":{\"id\":\"2959\"},\"width\":700,\"x_range\":{\"id\":\"2932\"},\"x_scale\":{\"id\":\"2941\"},\"y_range\":{\"id\":\"2933\"},\"y_scale\":{\"id\":\"2943\"}},\"id\":\"2936\",\"subtype\":\"Figure\",\"type\":\"Plot\"},{\"attributes\":{\"days\":[1,15]},\"id\":\"2994\",\"type\":\"DaysTicker\"},{\"attributes\":{},\"id\":\"3006\",\"type\":\"Selection\"},{\"attributes\":{\"end\":65.41270874023436,\"reset_end\":65.41270874023436,\"reset_start\":46.060203857421875,\"start\":46.060203857421875,\"tags\":[[[\"value\",\"value\",null]]]},\"id\":\"2933\",\"type\":\"Range1d\"},{\"attributes\":{},\"id\":\"2970\",\"type\":\"BasicTickFormatter\"},{\"attributes\":{\"callback\":null,\"formatters\":{\"@{date}\":\"datetime\"},\"renderers\":[{\"id\":\"2978\"},{\"id\":\"3011\"}],\"tags\":[\"hv_created\"],\"tooltips\":[[\"Variable\",\"@{Variable}\"],[\"date\",\"@{date}{%F %T}\"],[\"value\",\"@{value}\"]]},\"id\":\"2934\",\"type\":\"HoverTool\"},{\"attributes\":{\"line_color\":\"#30a2da\",\"line_width\":2,\"x\":{\"field\":\"date\"},\"y\":{\"field\":\"value\"}},\"id\":\"2975\",\"type\":\"Line\"},{\"attributes\":{\"data\":{\"Variable\":[\"Predicted\",\"Predicted\",\"Predicted\",\"Predicted\",\"Predicted\",\"Predicted\",\"Predicted\",\"Predicted\",\"Predicted\",\"Predicted\",\"Predicted\",\"Predicted\",\"Predicted\",\"Predicted\",\"Predicted\",\"Predicted\",\"Predicted\",\"Predicted\",\"Predicted\",\"Predicted\",\"Predicted\",\"Predicted\",\"Predicted\",\"Predicted\",\"Predicted\",\"Predicted\",\"Predicted\",\"Predicted\",\"Predicted\",\"Predicted\",\"Predicted\",\"Predicted\",\"Predicted\",\"Predicted\",\"Predicted\",\"Predicted\",\"Predicted\",\"Predicted\",\"Predicted\",\"Predicted\",\"Predicted\",\"Predicted\",\"Predicted\",\"Predicted\",\"Predicted\",\"Predicted\",\"Predicted\",\"Predicted\",\"Predicted\",\"Predicted\",\"Predicted\",\"Predicted\",\"Predicted\",\"Predicted\",\"Predicted\",\"Predicted\",\"Predicted\",\"Predicted\",\"Predicted\",\"Predicted\",\"Predicted\",\"Predicted\",\"Predicted\",\"Predicted\",\"Predicted\",\"Predicted\",\"Predicted\",\"Predicted\",\"Predicted\"],\"date\":{\"__ndarray__\":\"AADAQKykd0IAAICm/qR3QgAAQAxRpXdCAAAAcqOld0IAAMDX9aV3QgAAgD1IpndCAABAo5qmd0IAAAAJ7aZ3QgAAwG4/p3dCAACA1JGnd0IAAEA65Kd3QgAAAKA2qHdCAADABYmod0IAAIBr26h3QgAAQNEtqXdCAAAAN4Cpd0IAAMCc0ql3QgAAgAIlqndCAABAaHeqd0IAAADOyap3QgAAwDMcq3dCAACAmW6rd0IAAED/wKt3QgAAAGUTrHdCAADAymWsd0IAAIAwuKx3QgAAQJYKrXdCAAAA/Fytd0IAAMBhr613QgAAgMcBrndCAABALVSud0IAAACTpq53QgAAwPj4rndCAACAXkuvd0IAAEDEna93QgAAACrwr3dCAADAj0Kwd0IAAID1lLB3QgAAQFvnsHdCAAAAwTmxd0IAAMAmjLF3QgAAgIzesXdCAABA8jCyd0IAAABYg7J3QgAAwL3VsndCAACAIyizd0IAAECJerN3QgAAAO/Ms3dCAADAVB+0d0IAAIC6cbR3QgAAQCDEtHdCAAAAhha1d0IAAMDraLV3QgAAgFG7tXdCAABAtw22d0IAAAAdYLZ3QgAAwIKytndCAACA6AS3d0IAAEBOV7d3QgAAALSpt3dCAADAGfy3d0IAAIB/Trh3QgAAQOWguHdCAAAAS/O4d0IAAMCwRbl3QgAAgBaYuXdCAABAfOq5d0IAAADiPLp3QgAAwEePundC\",\"dtype\":\"float64\",\"order\":\"little\",\"shape\":[69]},\"value\":{\"__ndarray__\":\"ELE+QpXRP0KkzUBCQMNBQvm2QkITpENCQ5hEQkabRUITu0ZCm8RHQo+/SEIpsElCGZNKQhR4S0Kub0xCYoZNQkSHTkJse09Ct3JQQghkUUKgX1JCinlTQue4VEJw6VVCoARXQu4WWELuGFlCCRRaQkEhW0L0RVxCTlpdQvJcXkITV19CBkFgQo8mYUJpHGJCSitjQp4tZEKMGWVCoP5lQlLVZkKdpmdCU4doQvSFaULtgGpCzGlrQlpTbEI0N21C6RhuQo0Mb0L+D3BCCg5xQrf4cUJU23JCprdzQjKRdEJqd3VC72t2Qk5ad0KlM3hCuQV5QlPPeUIZjnpCvU97QgISfEJnxnxCzVp9QnHnfUIrc35C\",\"dtype\":\"float32\",\"order\":\"little\",\"shape\":[69]}},\"selected\":{\"id\":\"3006\"},\"selection_policy\":{\"id\":\"3036\"}},\"id\":\"3005\",\"type\":\"ColumnDataSource\"},{\"attributes\":{},\"id\":\"2953\",\"type\":\"SaveTool\"},{\"attributes\":{\"line_color\":\"#30a2da\",\"line_width\":2,\"x\":{\"field\":\"date\"},\"y\":{\"field\":\"value\"}},\"id\":\"3004\",\"type\":\"Line\"},{\"attributes\":{},\"id\":\"2954\",\"type\":\"PanTool\"},{\"attributes\":{},\"id\":\"2968\",\"type\":\"AllLabels\"},{\"attributes\":{\"line_alpha\":0.2,\"line_color\":\"#fc4f30\",\"line_width\":2,\"x\":{\"field\":\"date\"},\"y\":{\"field\":\"value\"}},\"id\":\"3010\",\"type\":\"Line\"},{\"attributes\":{\"data_source\":{\"id\":\"3005\"},\"glyph\":{\"id\":\"3008\"},\"hover_glyph\":null,\"muted_glyph\":{\"id\":\"3010\"},\"nonselection_glyph\":{\"id\":\"3009\"},\"selection_glyph\":{\"id\":\"3038\"},\"view\":{\"id\":\"3012\"}},\"id\":\"3011\",\"type\":\"GlyphRenderer\"},{\"attributes\":{},\"id\":\"2955\",\"type\":\"WheelZoomTool\"},{\"attributes\":{},\"id\":\"2999\",\"type\":\"YearsTicker\"},{\"attributes\":{\"active_multi\":null,\"tools\":[{\"id\":\"2934\"},{\"id\":\"2953\"},{\"id\":\"2954\"},{\"id\":\"2955\"},{\"id\":\"2956\"},{\"id\":\"2957\"}]},\"id\":\"2959\",\"type\":\"Toolbar\"},{\"attributes\":{},\"id\":\"2950\",\"type\":\"BasicTicker\"},{\"attributes\":{\"label\":{\"value\":\"Real\"},\"renderers\":[{\"id\":\"2978\"}]},\"id\":\"3003\",\"type\":\"LegendItem\"},{\"attributes\":{\"axis\":{\"id\":\"2949\"},\"dimension\":1,\"grid_line_color\":null,\"ticker\":null},\"id\":\"2952\",\"type\":\"Grid\"},{\"attributes\":{\"children\":[{\"id\":\"2931\"},{\"id\":\"2936\"},{\"id\":\"3255\"}],\"margin\":[0,0,0,0],\"name\":\"Row06690\",\"tags\":[\"embedded\"]},\"id\":\"2930\",\"type\":\"Row\"},{\"attributes\":{\"overlay\":{\"id\":\"2958\"}},\"id\":\"2956\",\"type\":\"BoxZoomTool\"},{\"attributes\":{\"line_alpha\":0.2,\"line_color\":\"#30a2da\",\"line_width\":2,\"x\":{\"field\":\"date\"},\"y\":{\"field\":\"value\"}},\"id\":\"2977\",\"type\":\"Line\"},{\"attributes\":{\"line_alpha\":0.1,\"line_color\":\"#30a2da\",\"line_width\":2,\"x\":{\"field\":\"date\"},\"y\":{\"field\":\"value\"}},\"id\":\"2976\",\"type\":\"Line\"},{\"attributes\":{\"source\":{\"id\":\"3005\"}},\"id\":\"3012\",\"type\":\"CDSView\"},{\"attributes\":{\"line_color\":\"#fc4f30\",\"line_width\":2,\"x\":{\"field\":\"date\"},\"y\":{\"field\":\"value\"}},\"id\":\"3038\",\"type\":\"Line\"},{\"attributes\":{\"margin\":[5,5,5,5],\"name\":\"HSpacer06695\",\"sizing_mode\":\"stretch_width\"},\"id\":\"3255\",\"type\":\"Spacer\"},{\"attributes\":{\"text\":\"Model Performance\",\"text_color\":\"black\",\"text_font_size\":\"12pt\"},\"id\":\"2937\",\"type\":\"Title\"},{\"attributes\":{\"data_source\":{\"id\":\"2972\"},\"glyph\":{\"id\":\"2975\"},\"hover_glyph\":null,\"muted_glyph\":{\"id\":\"2977\"},\"nonselection_glyph\":{\"id\":\"2976\"},\"selection_glyph\":{\"id\":\"3004\"},\"view\":{\"id\":\"2979\"}},\"id\":\"2978\",\"type\":\"GlyphRenderer\"},{\"attributes\":{},\"id\":\"2957\",\"type\":\"ResetTool\"},{\"attributes\":{},\"id\":\"2943\",\"type\":\"LinearScale\"},{\"attributes\":{\"days\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]},\"id\":\"2991\",\"type\":\"DaysTicker\"},{\"attributes\":{\"line_color\":\"#fc4f30\",\"line_width\":2,\"x\":{\"field\":\"date\"},\"y\":{\"field\":\"value\"}},\"id\":\"3008\",\"type\":\"Line\"},{\"attributes\":{\"days\":[1,8,15,22]},\"id\":\"2993\",\"type\":\"DaysTicker\"},{\"attributes\":{\"axis_label\":\"date\",\"formatter\":{\"id\":\"2967\"},\"major_label_policy\":{\"id\":\"2968\"},\"ticker\":{\"id\":\"2946\"}},\"id\":\"2945\",\"type\":\"DatetimeAxis\"},{\"attributes\":{\"source\":{\"id\":\"2972\"}},\"id\":\"2979\",\"type\":\"CDSView\"},{\"attributes\":{\"num_minor_ticks\":5,\"tickers\":[{\"id\":\"2988\"},{\"id\":\"2989\"},{\"id\":\"2990\"},{\"id\":\"2991\"},{\"id\":\"2992\"},{\"id\":\"2993\"},{\"id\":\"2994\"},{\"id\":\"2995\"},{\"id\":\"2996\"},{\"id\":\"2997\"},{\"id\":\"2998\"},{\"id\":\"2999\"}]},\"id\":\"2946\",\"type\":\"DatetimeTicker\"},{\"attributes\":{\"mantissas\":[1,2,5],\"max_interval\":500.0,\"num_minor_ticks\":0},\"id\":\"2988\",\"type\":\"AdaptiveTicker\"},{\"attributes\":{\"days\":[1,4,7,10,13,16,19,22,25,28]},\"id\":\"2992\",\"type\":\"DaysTicker\"},{\"attributes\":{\"months\":[0,2,4,6,8,10]},\"id\":\"2996\",\"type\":\"MonthsTicker\"},{\"attributes\":{\"base\":24,\"mantissas\":[1,2,4,6,8,12],\"max_interval\":43200000.0,\"min_interval\":3600000.0,\"num_minor_ticks\":0},\"id\":\"2990\",\"type\":\"AdaptiveTicker\"},{\"attributes\":{},\"id\":\"2941\",\"type\":\"LinearScale\"},{\"attributes\":{\"months\":[0,4,8]},\"id\":\"2997\",\"type\":\"MonthsTicker\"},{\"attributes\":{},\"id\":\"3036\",\"type\":\"UnionRenderers\"},{\"attributes\":{\"axis\":{\"id\":\"2945\"},\"grid_line_color\":null,\"ticker\":null},\"id\":\"2948\",\"type\":\"Grid\"},{\"attributes\":{\"months\":[0,6]},\"id\":\"2998\",\"type\":\"MonthsTicker\"},{\"attributes\":{\"click_policy\":\"mute\",\"items\":[{\"id\":\"3003\"},{\"id\":\"3037\"}],\"location\":[0,0],\"title\":\"Variable\"},\"id\":\"3002\",\"type\":\"Legend\"},{\"attributes\":{\"base\":60,\"mantissas\":[1,2,5,10,15,20,30],\"max_interval\":1800000.0,\"min_interval\":1000.0,\"num_minor_ticks\":0},\"id\":\"2989\",\"type\":\"AdaptiveTicker\"},{\"attributes\":{\"end\":1630627200000.0,\"reset_end\":1630627200000.0,\"reset_start\":1624752000000.0,\"start\":1624752000000.0,\"tags\":[[[\"date\",\"date\",null]]]},\"id\":\"2932\",\"type\":\"Range1d\"},{\"attributes\":{\"axis_label\":\"\",\"formatter\":{\"id\":\"2970\"},\"major_label_policy\":{\"id\":\"2971\"},\"ticker\":{\"id\":\"2950\"}},\"id\":\"2949\",\"type\":\"LinearAxis\"}],\"root_ids\":[\"2930\"]},\"title\":\"Bokeh Application\",\"version\":\"2.3.2\"}};\n",
       "    var render_items = [{\"docid\":\"95baf00c-5c57-436b-9ce2-8a2b6bc9750d\",\"root_ids\":[\"2930\"],\"roots\":{\"2930\":\"1c5f78be-8649-412a-8cff-e8451bd5e932\"}}];\n",
       "    root.Bokeh.embed.embed_items_notebook(docs_json, render_items);\n",
       "  }\n",
       "  if (root.Bokeh !== undefined && root.Bokeh.Panel !== undefined && root['Plotly'] !== undefined ) {\n",
       "    embed_document(root);\n",
       "  } else {\n",
       "    var attempts = 0;\n",
       "    var timer = setInterval(function(root) {\n",
       "      if (root.Bokeh !== undefined && root.Bokeh.Panel !== undefined && root['Plotly'] !== undefined) {\n",
       "        clearInterval(timer);\n",
       "        embed_document(root);\n",
       "      } else if (document.readyState == \"complete\") {\n",
       "        attempts++;\n",
       "        if (attempts > 100) {\n",
       "          clearInterval(timer);\n",
       "          console.log(\"Bokeh: ERROR: Unable to run BokehJS code because BokehJS library is missing\");\n",
       "        }\n",
       "      }\n",
       "    }, 10, root)\n",
       "  }\n",
       "})(window);</script>"
      ],
      "text/plain": [
       ":NdOverlay   [Variable]\n",
       "   :Curve   [date]   (value)"
      ]
     },
     "execution_count": 28,
     "metadata": {
      "application/vnd.holoviews_exec.v0+json": {
       "id": "2930"
      }
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "window = 5\n",
    "epochs = 990\n",
    "batch_size = 15\n",
    "number_units = 150\n",
    "prediction_days = 21\n",
    "country= \"England\"\n",
    "\n",
    "days_forecast = 10\n",
    "\n",
    "df = download_fully_vacinated_data(country)\n",
    "model, scaler, compare_df, plot = create_model(df)\n",
    "plot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "e41fe0f3",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {},
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.holoviews_exec.v0+json": "",
      "text/html": [
       "<div id='3377'>\n",
       "\n",
       "\n",
       "\n",
       "\n",
       "\n",
       "  <div class=\"bk-root\" id=\"9b25c073-4d98-4c3a-b1d9-888ad85c6087\" data-root-id=\"3377\"></div>\n",
       "</div>\n",
       "<script type=\"application/javascript\">(function(root) {\n",
       "  function embed_document(root) {\n",
       "    var docs_json = {\"43f464d9-b453-429c-b888-ff027103e2a3\":{\"defs\":[],\"roots\":{\"references\":[{\"attributes\":{\"text_color\":\"black\",\"text_font_size\":\"12pt\"},\"id\":\"3383\",\"type\":\"Title\"},{\"attributes\":{\"base\":60,\"mantissas\":[1,2,5,10,15,20,30],\"max_interval\":1800000.0,\"min_interval\":1000.0,\"num_minor_ticks\":0},\"id\":\"3436\",\"type\":\"AdaptiveTicker\"},{\"attributes\":{\"source\":{\"id\":\"3412\"}},\"id\":\"3419\",\"type\":\"CDSView\"},{\"attributes\":{\"num_minor_ticks\":5,\"tickers\":[{\"id\":\"3435\"},{\"id\":\"3436\"},{\"id\":\"3437\"},{\"id\":\"3438\"},{\"id\":\"3439\"},{\"id\":\"3440\"},{\"id\":\"3441\"},{\"id\":\"3442\"},{\"id\":\"3443\"},{\"id\":\"3444\"},{\"id\":\"3445\"},{\"id\":\"3446\"}]},\"id\":\"3392\",\"type\":\"DatetimeTicker\"},{\"attributes\":{},\"id\":\"3423\",\"type\":\"AllLabels\"},{\"attributes\":{\"line_color\":\"#30a2da\",\"line_width\":2,\"x\":{\"field\":\"date\"},\"y\":{\"field\":\"people_fully_vaccinated_per_hundred\"}},\"id\":\"3415\",\"type\":\"Line\"},{\"attributes\":{\"margin\":[5,5,5,5],\"name\":\"HSpacer07118\",\"sizing_mode\":\"stretch_width\"},\"id\":\"3471\",\"type\":\"Spacer\"},{\"attributes\":{\"axis\":{\"id\":\"3391\"},\"grid_line_color\":null,\"ticker\":null},\"id\":\"3394\",\"type\":\"Grid\"},{\"attributes\":{\"days\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]},\"id\":\"3438\",\"type\":\"DaysTicker\"},{\"attributes\":{\"axis\":{\"id\":\"3395\"},\"dimension\":1,\"grid_line_color\":null,\"ticker\":null},\"id\":\"3398\",\"type\":\"Grid\"},{\"attributes\":{\"days\":[1,4,7,10,13,16,19,22,25,28]},\"id\":\"3439\",\"type\":\"DaysTicker\"},{\"attributes\":{\"callback\":null,\"formatters\":{\"@{date}\":\"datetime\"},\"renderers\":[{\"id\":\"3418\"}],\"tags\":[\"hv_created\"],\"tooltips\":[[\"date\",\"@{date}{%F %T}\"],[\"people_fully_vaccinated_per_hundred\",\"@{people_fully_vaccinated_per_hundred}\"]]},\"id\":\"3381\",\"type\":\"HoverTool\"},{\"attributes\":{\"axis_label\":\"people_fully_vaccinated_per_hundred\",\"formatter\":{\"id\":\"3425\"},\"major_label_policy\":{\"id\":\"3426\"},\"ticker\":{\"id\":\"3396\"}},\"id\":\"3395\",\"type\":\"LinearAxis\"},{\"attributes\":{},\"id\":\"3422\",\"type\":\"DatetimeTickFormatter\"},{\"attributes\":{\"days\":[1,8,15,22]},\"id\":\"3440\",\"type\":\"DaysTicker\"},{\"attributes\":{},\"id\":\"3425\",\"type\":\"BasicTickFormatter\"},{\"attributes\":{\"days\":[1,15]},\"id\":\"3441\",\"type\":\"DaysTicker\"},{\"attributes\":{\"line_alpha\":0.2,\"line_color\":\"#30a2da\",\"line_width\":2,\"x\":{\"field\":\"date\"},\"y\":{\"field\":\"people_fully_vaccinated_per_hundred\"}},\"id\":\"3417\",\"type\":\"Line\"},{\"attributes\":{\"bottom_units\":\"screen\",\"fill_alpha\":0.5,\"fill_color\":\"lightgrey\",\"left_units\":\"screen\",\"level\":\"overlay\",\"line_alpha\":1.0,\"line_color\":\"black\",\"line_dash\":[4,4],\"line_width\":2,\"right_units\":\"screen\",\"syncable\":false,\"top_units\":\"screen\"},\"id\":\"3404\",\"type\":\"BoxAnnotation\"},{\"attributes\":{\"mantissas\":[1,2,5],\"max_interval\":500.0,\"num_minor_ticks\":0},\"id\":\"3435\",\"type\":\"AdaptiveTicker\"},{\"attributes\":{\"months\":[0,1,2,3,4,5,6,7,8,9,10,11]},\"id\":\"3442\",\"type\":\"MonthsTicker\"},{\"attributes\":{\"data_source\":{\"id\":\"3412\"},\"glyph\":{\"id\":\"3415\"},\"hover_glyph\":null,\"muted_glyph\":{\"id\":\"3417\"},\"nonselection_glyph\":{\"id\":\"3416\"},\"selection_glyph\":{\"id\":\"3420\"},\"view\":{\"id\":\"3419\"}},\"id\":\"3418\",\"type\":\"GlyphRenderer\"},{\"attributes\":{\"base\":24,\"mantissas\":[1,2,4,6,8,12],\"max_interval\":43200000.0,\"min_interval\":3600000.0,\"num_minor_ticks\":0},\"id\":\"3437\",\"type\":\"AdaptiveTicker\"},{\"attributes\":{\"active_multi\":null,\"tools\":[{\"id\":\"3381\"},{\"id\":\"3399\"},{\"id\":\"3400\"},{\"id\":\"3401\"},{\"id\":\"3402\"},{\"id\":\"3403\"}]},\"id\":\"3405\",\"type\":\"Toolbar\"},{\"attributes\":{\"months\":[0,2,4,6,8,10]},\"id\":\"3443\",\"type\":\"MonthsTicker\"},{\"attributes\":{},\"id\":\"3399\",\"type\":\"SaveTool\"},{\"attributes\":{\"months\":[0,4,8]},\"id\":\"3444\",\"type\":\"MonthsTicker\"},{\"attributes\":{\"below\":[{\"id\":\"3391\"}],\"center\":[{\"id\":\"3394\"},{\"id\":\"3398\"}],\"height\":300,\"left\":[{\"id\":\"3395\"}],\"margin\":[5,5,5,5],\"min_border_bottom\":10,\"min_border_left\":10,\"min_border_right\":10,\"min_border_top\":10,\"renderers\":[{\"id\":\"3418\"}],\"sizing_mode\":\"fixed\",\"title\":{\"id\":\"3383\"},\"toolbar\":{\"id\":\"3405\"},\"width\":700,\"x_range\":{\"id\":\"3379\"},\"x_scale\":{\"id\":\"3387\"},\"y_range\":{\"id\":\"3380\"},\"y_scale\":{\"id\":\"3389\"}},\"id\":\"3382\",\"subtype\":\"Figure\",\"type\":\"Plot\"},{\"attributes\":{},\"id\":\"3400\",\"type\":\"PanTool\"},{\"attributes\":{\"months\":[0,6]},\"id\":\"3445\",\"type\":\"MonthsTicker\"},{\"attributes\":{},\"id\":\"3389\",\"type\":\"LinearScale\"},{\"attributes\":{\"end\":1632528000000.0,\"reset_end\":1632528000000.0,\"reset_start\":1609200000000.0,\"start\":1609200000000.0,\"tags\":[[[\"date\",\"date\",null]]]},\"id\":\"3379\",\"type\":\"Range1d\"},{\"attributes\":{},\"id\":\"3401\",\"type\":\"WheelZoomTool\"},{\"attributes\":{},\"id\":\"3446\",\"type\":\"YearsTicker\"},{\"attributes\":{},\"id\":\"3426\",\"type\":\"AllLabels\"},{\"attributes\":{\"children\":[{\"id\":\"3378\"},{\"id\":\"3382\"},{\"id\":\"3471\"}],\"margin\":[0,0,0,0],\"name\":\"Row07113\",\"tags\":[\"embedded\"]},\"id\":\"3377\",\"type\":\"Row\"},{\"attributes\":{\"overlay\":{\"id\":\"3404\"}},\"id\":\"3402\",\"type\":\"BoxZoomTool\"},{\"attributes\":{},\"id\":\"3413\",\"type\":\"Selection\"},{\"attributes\":{},\"id\":\"3448\",\"type\":\"UnionRenderers\"},{\"attributes\":{},\"id\":\"3387\",\"type\":\"LinearScale\"},{\"attributes\":{\"data\":{\"date\":{\"__ndarray__\":\"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\",\"dtype\":\"float64\",\"order\":\"little\",\"shape\":[269]},\"people_fully_vaccinated_per_hundred\":{\"__ndarray__\":\"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\",\"dtype\":\"float64\",\"order\":\"little\",\"shape\":[269]}},\"selected\":{\"id\":\"3413\"},\"selection_policy\":{\"id\":\"3448\"}},\"id\":\"3412\",\"type\":\"ColumnDataSource\"},{\"attributes\":{\"end\":78.06887283325196,\"reset_end\":78.06887283325196,\"reset_start\":-7.09717025756836,\"start\":-7.09717025756836,\"tags\":[[[\"people_fully_vaccinated_per_hundred\",\"people_fully_vaccinated_per_hundred\",null]]]},\"id\":\"3380\",\"type\":\"Range1d\"},{\"attributes\":{},\"id\":\"3403\",\"type\":\"ResetTool\"},{\"attributes\":{\"line_color\":\"#30a2da\",\"line_width\":2,\"x\":{\"field\":\"date\"},\"y\":{\"field\":\"people_fully_vaccinated_per_hundred\"}},\"id\":\"3420\",\"type\":\"Line\"},{\"attributes\":{},\"id\":\"3396\",\"type\":\"BasicTicker\"},{\"attributes\":{\"line_alpha\":0.1,\"line_color\":\"#30a2da\",\"line_width\":2,\"x\":{\"field\":\"date\"},\"y\":{\"field\":\"people_fully_vaccinated_per_hundred\"}},\"id\":\"3416\",\"type\":\"Line\"},{\"attributes\":{\"axis_label\":\"date\",\"formatter\":{\"id\":\"3422\"},\"major_label_policy\":{\"id\":\"3423\"},\"ticker\":{\"id\":\"3392\"}},\"id\":\"3391\",\"type\":\"DatetimeAxis\"},{\"attributes\":{\"margin\":[5,5,5,5],\"name\":\"HSpacer07117\",\"sizing_mode\":\"stretch_width\"},\"id\":\"3378\",\"type\":\"Spacer\"}],\"root_ids\":[\"3377\"]},\"title\":\"Bokeh Application\",\"version\":\"2.3.2\"}};\n",
       "    var render_items = [{\"docid\":\"43f464d9-b453-429c-b888-ff027103e2a3\",\"root_ids\":[\"3377\"],\"roots\":{\"3377\":\"9b25c073-4d98-4c3a-b1d9-888ad85c6087\"}}];\n",
       "    root.Bokeh.embed.embed_items_notebook(docs_json, render_items);\n",
       "  }\n",
       "  if (root.Bokeh !== undefined && root.Bokeh.Panel !== undefined && root['Plotly'] !== undefined ) {\n",
       "    embed_document(root);\n",
       "  } else {\n",
       "    var attempts = 0;\n",
       "    var timer = setInterval(function(root) {\n",
       "      if (root.Bokeh !== undefined && root.Bokeh.Panel !== undefined && root['Plotly'] !== undefined) {\n",
       "        clearInterval(timer);\n",
       "        embed_document(root);\n",
       "      } else if (document.readyState == \"complete\") {\n",
       "        attempts++;\n",
       "        if (attempts > 100) {\n",
       "          clearInterval(timer);\n",
       "          console.log(\"Bokeh: ERROR: Unable to run BokehJS code because BokehJS library is missing\");\n",
       "        }\n",
       "      }\n",
       "    }, 10, root)\n",
       "  }\n",
       "})(window);</script>"
      ],
      "text/plain": [
       ":Curve   [date]   (people_fully_vaccinated_per_hundred)"
      ]
     },
     "execution_count": 29,
     "metadata": {
      "application/vnd.holoviews_exec.v0+json": {
       "id": "3377"
      }
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Make Prediction\n",
    "vac_df = download_fully_vacinated_data(country)\n",
    "pre_plot = predict_main_data(vac_df, model, prediction_days)\n",
    "pre_plot\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "9c5170fa",
   "metadata": {},
   "outputs": [
    {
     "data": {},
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.holoviews_exec.v0+json": "",
      "text/html": [
       "<div id='3583'>\n",
       "\n",
       "\n",
       "\n",
       "\n",
       "\n",
       "  <div class=\"bk-root\" id=\"39563df3-d25e-4570-8156-01d922dfe42f\" data-root-id=\"3583\"></div>\n",
       "</div>\n",
       "<script type=\"application/javascript\">(function(root) {\n",
       "  function embed_document(root) {\n",
       "    var docs_json = {\"ce3fc7ca-a912-4055-9d95-ca555e9e7cb0\":{\"defs\":[],\"roots\":{\"references\":[{\"attributes\":{\"callback\":null,\"renderers\":[{\"id\":\"3624\"}],\"tags\":[\"hv_created\"],\"tooltips\":[[\"index\",\"@{index}\"],[\"Variable\",\"@{Variable}\"],[\"value\",\"@{value}\"]]},\"id\":\"3587\",\"type\":\"HoverTool\"},{\"attributes\":{\"end\":0.19059,\"reset_end\":0.19059,\"reset_start\":0.0,\"tags\":[[[\"value\",\"value\",null]]]},\"id\":\"3586\",\"type\":\"Range1d\"},{\"attributes\":{\"axis_label\":\"Sentiment Score\",\"formatter\":{\"id\":\"3639\"},\"major_label_policy\":{\"id\":\"3629\"},\"ticker\":{\"id\":\"3601\"}},\"id\":\"3600\",\"type\":\"LinearAxis\"},{\"attributes\":{\"data_source\":{\"id\":\"3618\"},\"glyph\":{\"id\":\"3621\"},\"hover_glyph\":null,\"muted_glyph\":{\"id\":\"3623\"},\"nonselection_glyph\":{\"id\":\"3622\"},\"selection_glyph\":{\"id\":\"3638\"},\"view\":{\"id\":\"3625\"}},\"id\":\"3624\",\"type\":\"GlyphRenderer\"},{\"attributes\":{\"factors\":[\"Pfizer\",\"Moderna\",\"Janssen\",\"Johnson&Johnson\",\"Sinopharm\",\"Vero Cell\",\"Sputnik V\",\"Sinovac\"],\"tags\":[[[\"index\",\"index\",null]]]},\"id\":\"3585\",\"type\":\"FactorRange\"},{\"attributes\":{\"margin\":[5,5,5,5],\"name\":\"HSpacer07965\",\"sizing_mode\":\"stretch_width\"},\"id\":\"3584\",\"type\":\"Spacer\"},{\"attributes\":{},\"id\":\"3608\",\"type\":\"ResetTool\"},{\"attributes\":{\"bottom\":{\"field\":\"bottom\"},\"fill_alpha\":{\"value\":0.2},\"fill_color\":{\"field\":\"Variable\",\"transform\":{\"id\":\"3617\"}},\"line_alpha\":{\"value\":0.2},\"top\":{\"field\":\"top\"},\"width\":{\"value\":0.8},\"x\":{\"field\":\"index\"}},\"id\":\"3623\",\"type\":\"VBar\"},{\"attributes\":{\"bottom\":{\"field\":\"bottom\"},\"fill_color\":{\"field\":\"Variable\",\"transform\":{\"id\":\"3617\"}},\"top\":{\"field\":\"top\"},\"width\":{\"value\":0.8},\"x\":{\"field\":\"index\"}},\"id\":\"3621\",\"type\":\"VBar\"},{\"attributes\":{},\"id\":\"3635\",\"type\":\"UnionRenderers\"},{\"attributes\":{\"format\":\"%.0f\"},\"id\":\"3639\",\"type\":\"PrintfTickFormatter\"},{\"attributes\":{\"label\":{\"field\":\"Variable\"},\"renderers\":[{\"id\":\"3624\"}]},\"id\":\"3637\",\"type\":\"LegendItem\"},{\"attributes\":{},\"id\":\"3606\",\"type\":\"WheelZoomTool\"},{\"attributes\":{},\"id\":\"3632\",\"type\":\"AllLabels\"},{\"attributes\":{\"below\":[{\"id\":\"3597\"}],\"center\":[{\"id\":\"3599\"},{\"id\":\"3603\"},{\"id\":\"3636\"}],\"height\":300,\"left\":[{\"id\":\"3600\"}],\"margin\":[5,5,5,5],\"min_border_bottom\":10,\"min_border_left\":10,\"min_border_right\":10,\"min_border_top\":10,\"renderers\":[{\"id\":\"3624\"}],\"right\":[{\"id\":\"3636\"}],\"sizing_mode\":\"fixed\",\"title\":{\"id\":\"3589\"},\"toolbar\":{\"id\":\"3610\"},\"width\":800,\"x_range\":{\"id\":\"3585\"},\"x_scale\":{\"id\":\"3593\"},\"y_range\":{\"id\":\"3586\"},\"y_scale\":{\"id\":\"3595\"}},\"id\":\"3588\",\"subtype\":\"Figure\",\"type\":\"Plot\"},{\"attributes\":{\"bottom_units\":\"screen\",\"fill_alpha\":0.5,\"fill_color\":\"lightgrey\",\"left_units\":\"screen\",\"level\":\"overlay\",\"line_alpha\":1.0,\"line_color\":\"black\",\"line_dash\":[4,4],\"line_width\":2,\"right_units\":\"screen\",\"syncable\":false,\"top_units\":\"screen\"},\"id\":\"3609\",\"type\":\"BoxAnnotation\"},{\"attributes\":{\"axis\":{\"id\":\"3597\"},\"grid_line_color\":null,\"ticker\":null},\"id\":\"3599\",\"type\":\"Grid\"},{\"attributes\":{\"children\":[{\"id\":\"3584\"},{\"id\":\"3588\"},{\"id\":\"3666\"}],\"margin\":[0,0,0,0],\"name\":\"Row07961\",\"tags\":[\"embedded\"]},\"id\":\"3583\",\"type\":\"Row\"},{\"attributes\":{\"factors\":[\"positive\",\"negative\"],\"palette\":[\"#30a2da\",\"#fc4f30\"]},\"id\":\"3617\",\"type\":\"CategoricalColorMapper\"},{\"attributes\":{},\"id\":\"3604\",\"type\":\"SaveTool\"},{\"attributes\":{},\"id\":\"3629\",\"type\":\"AllLabels\"},{\"attributes\":{\"bottom\":{\"field\":\"bottom\"},\"fill_alpha\":{\"value\":0.1},\"fill_color\":{\"field\":\"Variable\",\"transform\":{\"id\":\"3617\"}},\"line_alpha\":{\"value\":0.1},\"top\":{\"field\":\"top\"},\"width\":{\"value\":0.8},\"x\":{\"field\":\"index\"}},\"id\":\"3622\",\"type\":\"VBar\"},{\"attributes\":{},\"id\":\"3631\",\"type\":\"CategoricalTickFormatter\"},{\"attributes\":{\"source\":{\"id\":\"3618\"}},\"id\":\"3625\",\"type\":\"CDSView\"},{\"attributes\":{},\"id\":\"3593\",\"type\":\"CategoricalScale\"},{\"attributes\":{\"items\":[{\"id\":\"3637\"}],\"location\":[0,0]},\"id\":\"3636\",\"type\":\"Legend\"},{\"attributes\":{\"margin\":[5,5,5,5],\"name\":\"HSpacer07966\",\"sizing_mode\":\"stretch_width\"},\"id\":\"3666\",\"type\":\"Spacer\"},{\"attributes\":{\"axis_label\":\"Vaccine\",\"formatter\":{\"id\":\"3631\"},\"major_label_orientation\":0.7853981633974483,\"major_label_policy\":{\"id\":\"3632\"},\"ticker\":{\"id\":\"3598\"}},\"id\":\"3597\",\"type\":\"CategoricalAxis\"},{\"attributes\":{},\"id\":\"3605\",\"type\":\"PanTool\"},{\"attributes\":{\"axis\":{\"id\":\"3600\"},\"dimension\":1,\"grid_line_color\":null,\"ticker\":null},\"id\":\"3603\",\"type\":\"Grid\"},{\"attributes\":{},\"id\":\"3598\",\"type\":\"CategoricalTicker\"},{\"attributes\":{},\"id\":\"3619\",\"type\":\"Selection\"},{\"attributes\":{},\"id\":\"3595\",\"type\":\"LinearScale\"},{\"attributes\":{},\"id\":\"3601\",\"type\":\"BasicTicker\"},{\"attributes\":{\"text\":\"Sentiment toward Vaccine types\",\"text_color\":\"black\",\"text_font_size\":\"12pt\"},\"id\":\"3589\",\"type\":\"Title\"},{\"attributes\":{\"overlay\":{\"id\":\"3609\"}},\"id\":\"3607\",\"type\":\"BoxZoomTool\"},{\"attributes\":{\"data\":{\"Variable\":[\"positive\",\"positive\",\"positive\",\"positive\",\"positive\",\"positive\",\"positive\",\"positive\",\"negative\",\"negative\",\"negative\",\"negative\",\"negative\",\"negative\",\"negative\",\"negative\"],\"bottom\":{\"__ndarray__\":\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAM3MzMzMzLw/IEHxY8xduz+jAbwFEhSvP60cWmQ7368/qoJRSZ2Apj++wRcmUwWzP4QvTKYKRrU/sgxxrIvbqD8=\",\"dtype\":\"float64\",\"order\":\"little\",\"shape\":[16]},\"index\":[\"Pfizer\",\"Moderna\",\"Janssen\",\"Johnson&Johnson\",\"Sinopharm\",\"Vero Cell\",\"Sputnik V\",\"Sinovac\",\"Pfizer\",\"Moderna\",\"Janssen\",\"Johnson&Johnson\",\"Sinopharm\",\"Vero Cell\",\"Sputnik V\",\"Sinovac\"],\"top\":{\"__ndarray__\":\"zczMzMzMvD8gQfFjzF27P6MBvAUSFK8/rRxaZDvfrz+qglFJnYCmP77BFyZTBbM/hC9MpgpGtT+yDHGsi9uoP/JBz2bV58Y/o5I6AU2ExT9n1edqK/bDPwYSFD/G3MU/iWNd3EYDsD/aPXlYqDW9P4Lix5i7lsA/1QloImx4uj8=\",\"dtype\":\"float64\",\"order\":\"little\",\"shape\":[16]},\"value\":{\"__ndarray__\":\"zczMzMzMvD8gQfFjzF27P6MBvAUSFK8/rRxaZDvfrz+qglFJnYCmP77BFyZTBbM/hC9MpgpGtT+yDHGsi9uoPxe30QDeArE/S8gHPZtVrz/8qfHSTWK4P7UV+8vuybs/z4jS3uALkz84+MJkqmCkPwIrhxbZzqc/+AZfmEwVrD8=\",\"dtype\":\"float64\",\"order\":\"little\",\"shape\":[16]}},\"selected\":{\"id\":\"3619\"},\"selection_policy\":{\"id\":\"3635\"}},\"id\":\"3618\",\"type\":\"ColumnDataSource\"},{\"attributes\":{\"bottom\":{\"field\":\"bottom\"},\"fill_alpha\":{\"value\":1.0},\"fill_color\":{\"field\":\"Variable\",\"transform\":{\"id\":\"3617\"}},\"hatch_alpha\":{\"value\":1.0},\"hatch_color\":{\"value\":\"black\"},\"hatch_scale\":{\"value\":12.0},\"hatch_weight\":{\"value\":1.0},\"line_alpha\":{\"value\":1.0},\"line_cap\":{\"value\":\"butt\"},\"line_color\":{\"value\":\"black\"},\"line_dash\":{\"value\":[]},\"line_dash_offset\":{\"value\":0},\"line_join\":{\"value\":\"bevel\"},\"line_width\":{\"value\":1},\"top\":{\"field\":\"top\"},\"width\":{\"value\":0.8},\"x\":{\"field\":\"index\"}},\"id\":\"3638\",\"type\":\"VBar\"},{\"attributes\":{\"active_multi\":null,\"tools\":[{\"id\":\"3587\"},{\"id\":\"3604\"},{\"id\":\"3605\"},{\"id\":\"3606\"},{\"id\":\"3607\"},{\"id\":\"3608\"}]},\"id\":\"3610\",\"type\":\"Toolbar\"}],\"root_ids\":[\"3583\"]},\"title\":\"Bokeh Application\",\"version\":\"2.3.2\"}};\n",
       "    var render_items = [{\"docid\":\"ce3fc7ca-a912-4055-9d95-ca555e9e7cb0\",\"root_ids\":[\"3583\"],\"roots\":{\"3583\":\"39563df3-d25e-4570-8156-01d922dfe42f\"}}];\n",
       "    root.Bokeh.embed.embed_items_notebook(docs_json, render_items);\n",
       "  }\n",
       "  if (root.Bokeh !== undefined && root.Bokeh.Panel !== undefined && root['Plotly'] !== undefined ) {\n",
       "    embed_document(root);\n",
       "  } else {\n",
       "    var attempts = 0;\n",
       "    var timer = setInterval(function(root) {\n",
       "      if (root.Bokeh !== undefined && root.Bokeh.Panel !== undefined && root['Plotly'] !== undefined) {\n",
       "        clearInterval(timer);\n",
       "        embed_document(root);\n",
       "      } else if (document.readyState == \"complete\") {\n",
       "        attempts++;\n",
       "        if (attempts > 100) {\n",
       "          clearInterval(timer);\n",
       "          console.log(\"Bokeh: ERROR: Unable to run BokehJS code because BokehJS library is missing\");\n",
       "        }\n",
       "      }\n",
       "    }, 10, root)\n",
       "  }\n",
       "})(window);</script>"
      ],
      "text/plain": [
       ":Bars   [index,Variable]   (value)"
      ]
     },
     "execution_count": 30,
     "metadata": {
      "application/vnd.holoviews_exec.v0+json": {
       "id": "3583"
      }
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "plot = create_sentiment_plot(vaccine_array, 'en')\n",
    "plot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2ca0dc67",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "76010e7f",
   "metadata": {},
   "source": [
    "### Input for dashboard"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "895f216e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create Widget Elements\n",
    "countries = ['Afghanistan', 'Africa', 'Albania', 'Algeria', 'Andorra', 'Angola', 'Antigua and Barbuda', 'Argentina', 'Armenia', 'Asia', 'Australia', 'Austria', 'Azerbaijan', 'Bahamas', 'Bahrain', 'Bangladesh', 'Barbados', 'Belarus', 'Belgium', 'Belize', 'Benin', 'Bhutan', 'Bolivia', 'Bosnia and Herzegovina', 'Botswana', 'Brazil', 'Brunei', 'Bulgaria', 'Burkina Faso', 'Burundi', 'Cambodia', 'Cameroon', 'Canada', 'Cape Verde', 'Central African Republic', 'Chad', 'Chile', 'China', 'Colombia', 'Comoros', 'Congo', 'Costa Rica', \"Cote d'Ivoire\", 'Croatia', 'Cuba', 'Cyprus', 'Czechia', 'Democratic Republic of Congo', 'Denmark', 'Djibouti', 'Dominica', 'Dominican Republic', 'Ecuador', 'Egypt', 'El Salvador', 'Equatorial Guinea', 'Eritrea', 'Estonia', 'Eswatini', 'Ethiopia', 'Europe', 'European Union', 'Fiji', 'Finland', 'France', 'Gabon', 'Gambia', 'Georgia', 'Germany', 'Ghana', 'Greece', 'Grenada', 'Guatemala', 'Guinea', 'Guinea-Bissau', 'Guyana', 'Haiti', 'Honduras', 'Hong Kong', 'Hungary', 'Iceland', 'India', 'Indonesia', 'International', 'Iran', 'Iraq', 'Ireland', 'Israel', 'Italy', 'Jamaica', 'Japan', 'Jordan', 'Kazakhstan', 'Kenya', 'Kiribati', 'Kosovo', 'Kuwait', 'Kyrgyzstan', 'Laos', 'Latvia', 'Lebanon', 'Lesotho', 'Liberia', 'Libya', 'Liechtenstein', 'Lithuania', 'Luxembourg', 'Madagascar', 'Malawi', 'Malaysia', 'Maldives', 'Mali', 'Malta', 'Marshall Islands', 'Mauritania', 'Mauritius', 'Mexico', 'Micronesia (country)', 'Moldova', 'Monaco', 'Mongolia', 'Montenegro', 'Morocco', 'Mozambique', 'Myanmar', 'Namibia', 'Nepal', 'Netherlands', 'New Zealand', 'Nicaragua', 'Niger', 'Nigeria', 'North America', 'North Macedonia', 'Norway', 'Oceania', 'Oman', 'Pakistan', 'Palau', 'Palestine', 'Panama', 'Papua New Guinea', 'Paraguay', 'Peru', 'Philippines', 'Poland', 'Portugal', 'Qatar', 'Romania', 'Russia', 'Rwanda', 'Saint Kitts and Nevis', 'Saint Lucia', 'Saint Vincent and the Grenadines', 'Samoa', 'San Marino', 'Sao Tome and Principe', 'Saudi Arabia', 'Senegal', 'Serbia', 'Seychelles', 'Sierra Leone', 'Singapore', 'Slovakia', 'Slovenia', 'Solomon Islands', 'Somalia', 'South Africa', 'South America', 'South Korea', 'South Sudan', 'Spain', 'Sri Lanka', 'Sudan', 'Suriname', 'Sweden', 'Switzerland', 'Syria', 'Taiwan', 'Tajikistan', 'Tanzania', 'Thailand', 'Timor', 'Togo', 'Trinidad and Tobago', 'Tunisia', 'Turkey', 'Uganda', 'Ukraine', 'United Arab Emirates', 'United Kingdom', 'United States', 'Uruguay', 'Uzbekistan', 'Vanuatu', 'Vatican', 'Venezuela', 'Vietnam', 'World', 'Yemen', 'Zambia', 'Zimbabwe']\n",
    "country_list = pn.widgets.Select(name='Country:', options=countries)\n",
    "window_input = pn.widgets.IntInput(name='How many days window', start=7, end=30, step=1, value=7)\n",
    "epochs_input = pn.widgets.IntInput(name='Epochs', value=10, step=100, start=100, end=1000)\n",
    "batch_size_input = pn.widgets.IntInput(name='Batch Size', start=1, end=15, step=1, value=1)\n",
    "number_units_input = pn.widgets.IntInput(name='Units', value=50, step=10, start=0, end=1000)\n",
    "day_prediction_input = pn.widgets.IntInput(name='How many days of prediction?', start=0, end=30, step=3, value=7)\n",
    "model_functions_list = pn.widgets.Select(name='Prediction of...:', options=[\"---\", \"Cases\", \"One Dose\", \"Fully Vacinated\"], value=\"---\")\n",
    "#predict_functions_list = pn.widgets.Select(name='Prediction of...:', options=[\"---\", \"Cases\", \"One Dose\", \"Fully Vacinated\"], value=\"---\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "31d9c2e2",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "@pn.depends(country_list, window_input, epochs_input, batch_size_input, number_units_input, model_functions_list)\n",
    "def disp_create_model_data(country_list, window_input, epochs_input, batch_size_input, number_units_input, model_functions_list):\n",
    "    if model_functions_list == \"Cases\":\n",
    "        df = download_covid_new_cases(country_list)\n",
    "        model, scaler, compare_df, compare_plot = create_model(df)\n",
    "        # save model to single file\n",
    "        model.save('new_case_model.h5')\n",
    "        return compare_plot\n",
    "    elif model_functions_list == \"One Dose\":\n",
    "        df = download_vacination_data(country_list)\n",
    "        model, scaler, compare_df, compare_plot = create_model(df)\n",
    "        # save model to single file\n",
    "        model.save('one_dose_model.h5')\n",
    "        return compare_plot\n",
    "    elif model_functions_list == \"Fully Vacinated\":\n",
    "        df = download_fully_vacinated_data(country_list)\n",
    "        model, scaler, compare_df, compare_plot = create_model(df)\n",
    "        # save model to single file\n",
    "        model.save('fully_vaccinated_model.h5')\n",
    "        return compare_plot\n",
    "@pn.depends(model_functions_list, country_list, day_prediction_input)    \n",
    "def saved_model_prediction(model_functions_list, country_list, day_prediction_input):\n",
    "    if model_functions_list == \"Cases\":\n",
    "        saved_model = load_model('new_case_model.h5')\n",
    "        df = download_covid_new_cases(country_list)\n",
    "        pred_plot = predict_main_data(df, saved_model, prediction_days)\n",
    "        return pred_plot\n",
    "    elif model_functions_list == \"One Dose\":\n",
    "        saved_model = load_model('one_dose_model.h5')\n",
    "        df = download_vacination_data(country_list)\n",
    "        pred_plot = predict_main_data(df, saved_model, prediction_days)\n",
    "        return pred_plot\n",
    "    elif model_functions_list == \"Fully Vacinated\":\n",
    "        saved_model = load_model(\"fully_vaccinated_model.h5\")\n",
    "        df = download_fully_vacinated_data(country_list)\n",
    "        pred_plot = predict_main_data(df, saved_model, prediction_days)\n",
    "        return pred_plot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "9e4d5c86",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Input Parameters\n",
    "options_input = pn.Row(country_list, model_functions_list, align=\"center\")\n",
    "model_input1 = pn.Row(window_input, epochs_input, align=\"center\")\n",
    "model_input2 = pn.Row(batch_size_input, number_units_input, align=\"center\")\n",
    "option_output = pn.Row(disp_create_model_data, align=\"center\")\n",
    "prediction_output = pn.Row(day_prediction_input, align=\"center\")\n",
    "model_configuration_input = pn.Column(model_input1, model_input2, options_input, option_output, align=\"center\")\n",
    "saved_model_configuration = pn.Row(day_prediction_input)\n",
    "saved_model_output = pn.Row(saved_model_prediction)\n",
    "prediction = pn.Column(saved_model_configuration, saved_model_prediction)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "1a8e7b54",
   "metadata": {},
   "outputs": [
    {
     "data": {},
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {},
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.holoviews_exec.v0+json": "",
      "text/html": [
       "<div id='3713'>\n",
       "\n",
       "\n",
       "\n",
       "\n",
       "\n",
       "  <div class=\"bk-root\" id=\"fce8810f-084e-4a52-b55a-8391b734cddb\" data-root-id=\"3713\"></div>\n",
       "</div>\n",
       "<script type=\"application/javascript\">(function(root) {\n",
       "  function embed_document(root) {\n",
       "    var docs_json = {\"49c47fb5-74cf-42f8-8055-d1b8e3ab0df9\":{\"defs\":[],\"roots\":{\"references\":[{\"attributes\":{\"align\":\"center\",\"children\":[{\"id\":\"3803\"},{\"id\":\"3804\"}],\"margin\":[0,0,0,0],\"name\":\"Row08153\"},\"id\":\"3802\",\"type\":\"Row\"},{\"attributes\":{},\"id\":\"3735\",\"type\":\"BasicTicker\"},{\"attributes\":{\"high\":1000,\"low\":0,\"margin\":[5,10,5,10],\"mode\":\"int\",\"placeholder\":\"0\",\"step\":10,\"title\":\"Units\",\"value\":50,\"value_throttled\":50},\"id\":\"3807\",\"type\":\"Spinner\"},{\"attributes\":{\"children\":[{\"id\":\"3714\"}],\"css_classes\":[\"panel-widget-box\"],\"margin\":[5,5,5,5],\"name\":\"WidgetBox08931\"},\"id\":\"3713\",\"type\":\"Column\"},{\"attributes\":{\"margin\":[5,5,5,5],\"name\":\"Str08172\"},\"id\":\"3819\",\"type\":\"panel.models.markup.HTML\"},{\"attributes\":{\"align\":\"center\",\"children\":[{\"id\":\"3809\"},{\"id\":\"3810\"}],\"margin\":[0,0,0,0],\"name\":\"Row08152\"},\"id\":\"3808\",\"type\":\"Row\"},{\"attributes\":{},\"id\":\"3739\",\"type\":\"PanTool\"},{\"attributes\":{},\"id\":\"3763\",\"type\":\"AllLabels\"},{\"attributes\":{},\"id\":\"3766\",\"type\":\"AllLabels\"},{\"attributes\":{\"children\":[{\"id\":\"3717\"}],\"css_classes\":[\"panel-widget-box\"],\"margin\":[5,5,5,5],\"name\":\"WidgetBox08927\"},\"id\":\"3716\",\"type\":\"Column\"},{\"attributes\":{\"children\":[{\"id\":\"3817\"}],\"margin\":[0,0,0,0],\"name\":\"Row08163\"},\"id\":\"3816\",\"type\":\"Row\"},{\"attributes\":{\"text\":\"Sentiment toward Vaccine types\",\"text_color\":\"black\",\"text_font_size\":\"12pt\"},\"id\":\"3723\",\"type\":\"Title\"},{\"attributes\":{},\"id\":\"3742\",\"type\":\"ResetTool\"},{\"attributes\":{\"factors\":[\"positive\",\"negative\"],\"palette\":[\"#30a2da\",\"#fc4f30\"]},\"id\":\"3751\",\"type\":\"CategoricalColorMapper\"},{\"attributes\":{\"align\":\"center\",\"children\":[{\"id\":\"3806\"},{\"id\":\"3807\"}],\"margin\":[0,0,0,0],\"name\":\"Row08154\"},\"id\":\"3805\",\"type\":\"Row\"},{\"attributes\":{\"below\":[{\"id\":\"3731\"}],\"center\":[{\"id\":\"3733\"},{\"id\":\"3737\"},{\"id\":\"3770\"}],\"height\":300,\"left\":[{\"id\":\"3734\"}],\"margin\":[5,5,5,5],\"min_border_bottom\":10,\"min_border_left\":10,\"min_border_right\":10,\"min_border_top\":10,\"renderers\":[{\"id\":\"3758\"}],\"right\":[{\"id\":\"3770\"}],\"sizing_mode\":\"fixed\",\"title\":{\"id\":\"3723\"},\"toolbar\":{\"id\":\"3744\"},\"width\":800,\"x_range\":{\"id\":\"3719\"},\"x_scale\":{\"id\":\"3727\"},\"y_range\":{\"id\":\"3720\"},\"y_scale\":{\"id\":\"3729\"}},\"id\":\"3722\",\"subtype\":\"Figure\",\"type\":\"Plot\"},{\"attributes\":{\"high\":30,\"low\":0,\"margin\":[5,10,5,10],\"mode\":\"int\",\"placeholder\":\"0\",\"step\":3,\"title\":\"How many days of prediction?\",\"value\":7,\"value_throttled\":7},\"id\":\"3817\",\"type\":\"Spinner\"},{\"attributes\":{\"children\":[{\"id\":\"3722\"}],\"margin\":[0,0,0,0],\"name\":\"Row08925\"},\"id\":\"3718\",\"type\":\"Row\"},{\"attributes\":{\"active_multi\":null,\"tools\":[{\"id\":\"3721\"},{\"id\":\"3738\"},{\"id\":\"3739\"},{\"id\":\"3740\"},{\"id\":\"3741\"},{\"id\":\"3742\"}]},\"id\":\"3744\",\"type\":\"Toolbar\"},{\"attributes\":{\"axis_label\":\"Vaccine\",\"formatter\":{\"id\":\"3765\"},\"major_label_orientation\":0.7853981633974483,\"major_label_policy\":{\"id\":\"3766\"},\"ticker\":{\"id\":\"3732\"}},\"id\":\"3731\",\"type\":\"CategoricalAxis\"},{\"attributes\":{\"items\":[{\"id\":\"3771\"}],\"location\":[0,0]},\"id\":\"3770\",\"type\":\"Legend\"},{\"attributes\":{\"bottom\":{\"field\":\"bottom\"},\"fill_color\":{\"field\":\"Variable\",\"transform\":{\"id\":\"3751\"}},\"top\":{\"field\":\"top\"},\"width\":{\"value\":0.8},\"x\":{\"field\":\"index\"}},\"id\":\"3755\",\"type\":\"VBar\"},{\"attributes\":{\"axis_label\":\"Sentiment Score\",\"formatter\":{\"id\":\"3773\"},\"major_label_policy\":{\"id\":\"3763\"},\"ticker\":{\"id\":\"3735\"}},\"id\":\"3734\",\"type\":\"LinearAxis\"},{\"attributes\":{\"margin\":[5,10,5,10],\"options\":[\"Afghanistan\",\"Africa\",\"Albania\",\"Algeria\",\"Andorra\",\"Angola\",\"Antigua and Barbuda\",\"Argentina\",\"Armenia\",\"Asia\",\"Australia\",\"Austria\",\"Azerbaijan\",\"Bahamas\",\"Bahrain\",\"Bangladesh\",\"Barbados\",\"Belarus\",\"Belgium\",\"Belize\",\"Benin\",\"Bhutan\",\"Bolivia\",\"Bosnia and Herzegovina\",\"Botswana\",\"Brazil\",\"Brunei\",\"Bulgaria\",\"Burkina Faso\",\"Burundi\",\"Cambodia\",\"Cameroon\",\"Canada\",\"Cape Verde\",\"Central African Republic\",\"Chad\",\"Chile\",\"China\",\"Colombia\",\"Comoros\",\"Congo\",\"Costa Rica\",\"Cote d'Ivoire\",\"Croatia\",\"Cuba\",\"Cyprus\",\"Czechia\",\"Democratic Republic of Congo\",\"Denmark\",\"Djibouti\",\"Dominica\",\"Dominican Republic\",\"Ecuador\",\"Egypt\",\"El Salvador\",\"Equatorial Guinea\",\"Eritrea\",\"Estonia\",\"Eswatini\",\"Ethiopia\",\"Europe\",\"European Union\",\"Fiji\",\"Finland\",\"France\",\"Gabon\",\"Gambia\",\"Georgia\",\"Germany\",\"Ghana\",\"Greece\",\"Grenada\",\"Guatemala\",\"Guinea\",\"Guinea-Bissau\",\"Guyana\",\"Haiti\",\"Honduras\",\"Hong Kong\",\"Hungary\",\"Iceland\",\"India\",\"Indonesia\",\"International\",\"Iran\",\"Iraq\",\"Ireland\",\"Israel\",\"Italy\",\"Jamaica\",\"Japan\",\"Jordan\",\"Kazakhstan\",\"Kenya\",\"Kiribati\",\"Kosovo\",\"Kuwait\",\"Kyrgyzstan\",\"Laos\",\"Latvia\",\"Lebanon\",\"Lesotho\",\"Liberia\",\"Libya\",\"Liechtenstein\",\"Lithuania\",\"Luxembourg\",\"Madagascar\",\"Malawi\",\"Malaysia\",\"Maldives\",\"Mali\",\"Malta\",\"Marshall Islands\",\"Mauritania\",\"Mauritius\",\"Mexico\",\"Micronesia (country)\",\"Moldova\",\"Monaco\",\"Mongolia\",\"Montenegro\",\"Morocco\",\"Mozambique\",\"Myanmar\",\"Namibia\",\"Nepal\",\"Netherlands\",\"New Zealand\",\"Nicaragua\",\"Niger\",\"Nigeria\",\"North America\",\"North Macedonia\",\"Norway\",\"Oceania\",\"Oman\",\"Pakistan\",\"Palau\",\"Palestine\",\"Panama\",\"Papua New Guinea\",\"Paraguay\",\"Peru\",\"Philippines\",\"Poland\",\"Portugal\",\"Qatar\",\"Romania\",\"Russia\",\"Rwanda\",\"Saint Kitts and Nevis\",\"Saint Lucia\",\"Saint Vincent and the Grenadines\",\"Samoa\",\"San Marino\",\"Sao Tome and Principe\",\"Saudi Arabia\",\"Senegal\",\"Serbia\",\"Seychelles\",\"Sierra Leone\",\"Singapore\",\"Slovakia\",\"Slovenia\",\"Solomon Islands\",\"Somalia\",\"South Africa\",\"South America\",\"South Korea\",\"South Sudan\",\"Spain\",\"Sri Lanka\",\"Sudan\",\"Suriname\",\"Sweden\",\"Switzerland\",\"Syria\",\"Taiwan\",\"Tajikistan\",\"Tanzania\",\"Thailand\",\"Timor\",\"Togo\",\"Trinidad and Tobago\",\"Tunisia\",\"Turkey\",\"Uganda\",\"Ukraine\",\"United Arab Emirates\",\"United Kingdom\",\"United States\",\"Uruguay\",\"Uzbekistan\",\"Vanuatu\",\"Vatican\",\"Venezuela\",\"Vietnam\",\"World\",\"Yemen\",\"Zambia\",\"Zimbabwe\"],\"title\":\"Country:\",\"value\":\"Afghanistan\"},\"id\":\"3809\",\"type\":\"Select\"},{\"attributes\":{},\"id\":\"3765\",\"type\":\"CategoricalTickFormatter\"},{\"attributes\":{\"end\":0.19059,\"reset_end\":0.19059,\"reset_start\":0.0,\"tags\":[[[\"value\",\"value\",null]]]},\"id\":\"3720\",\"type\":\"Range1d\"},{\"attributes\":{\"css_classes\":[\"markdown\"],\"margin\":[5,5,5,5],\"name\":\"Markdown08928\",\"text\":\"&lt;h1&gt;COVID Forecast Dasboard&lt;/h1&gt;\"},\"id\":\"3715\",\"type\":\"panel.models.markup.HTML\"},{\"attributes\":{},\"id\":\"3727\",\"type\":\"CategoricalScale\"},{\"attributes\":{\"children\":[{\"id\":\"3813\"}],\"margin\":[0,0,0,0],\"name\":\"Row08159\"},\"id\":\"3812\",\"type\":\"Row\"},{\"attributes\":{},\"id\":\"3738\",\"type\":\"SaveTool\"},{\"attributes\":{\"bottom\":{\"field\":\"bottom\"},\"fill_alpha\":{\"value\":1.0},\"fill_color\":{\"field\":\"Variable\",\"transform\":{\"id\":\"3751\"}},\"hatch_alpha\":{\"value\":1.0},\"hatch_color\":{\"value\":\"black\"},\"hatch_scale\":{\"value\":12.0},\"hatch_weight\":{\"value\":1.0},\"line_alpha\":{\"value\":1.0},\"line_cap\":{\"value\":\"butt\"},\"line_color\":{\"value\":\"black\"},\"line_dash\":{\"value\":[]},\"line_dash_offset\":{\"value\":0},\"line_join\":{\"value\":\"bevel\"},\"line_width\":{\"value\":1},\"top\":{\"field\":\"top\"},\"width\":{\"value\":0.8},\"x\":{\"field\":\"index\"}},\"id\":\"3772\",\"type\":\"VBar\"},{\"attributes\":{\"child\":{\"id\":\"3815\"},\"name\":\"Column08175\",\"title\":\"Prediction\"},\"id\":\"3820\",\"type\":\"Panel\"},{\"attributes\":{\"high\":30,\"low\":7,\"margin\":[5,10,5,10],\"mode\":\"int\",\"placeholder\":\"0\",\"title\":\"How many days window\",\"value\":7,\"value_throttled\":7},\"id\":\"3803\",\"type\":\"Spinner\"},{\"attributes\":{\"format\":\"%.0f\"},\"id\":\"3773\",\"type\":\"PrintfTickFormatter\"},{\"attributes\":{\"margin\":[0,0,0,0],\"tabs\":[{\"id\":\"3800\"},{\"id\":\"3814\"},{\"id\":\"3820\"}]},\"id\":\"3717\",\"type\":\"Tabs\"},{\"attributes\":{\"margin\":[5,10,5,10],\"options\":[\"---\",\"Cases\",\"One Dose\",\"Fully Vacinated\"],\"title\":\"Prediction of...:\",\"value\":\"---\"},\"id\":\"3810\",\"type\":\"Select\"},{\"attributes\":{},\"id\":\"3769\",\"type\":\"UnionRenderers\"},{\"attributes\":{\"high\":1000,\"low\":100,\"margin\":[5,10,5,10],\"mode\":\"int\",\"placeholder\":\"0\",\"step\":100,\"title\":\"Epochs\",\"value\":10,\"value_throttled\":10},\"id\":\"3804\",\"type\":\"Spinner\"},{\"attributes\":{\"bottom\":{\"field\":\"bottom\"},\"fill_alpha\":{\"value\":0.1},\"fill_color\":{\"field\":\"Variable\",\"transform\":{\"id\":\"3751\"}},\"line_alpha\":{\"value\":0.1},\"top\":{\"field\":\"top\"},\"width\":{\"value\":0.8},\"x\":{\"field\":\"index\"}},\"id\":\"3756\",\"type\":\"VBar\"},{\"attributes\":{\"source\":{\"id\":\"3752\"}},\"id\":\"3759\",\"type\":\"CDSView\"},{\"attributes\":{\"child\":{\"id\":\"3718\"},\"name\":\"Row08925\",\"title\":\"Sentimment toward Vacine types\"},\"id\":\"3800\",\"type\":\"Panel\"},{\"attributes\":{\"align\":\"center\",\"children\":[{\"id\":\"3802\"},{\"id\":\"3805\"},{\"id\":\"3808\"},{\"id\":\"3811\"}],\"margin\":[0,0,0,0],\"name\":\"Column08162\"},\"id\":\"3801\",\"type\":\"Column\"},{\"attributes\":{},\"id\":\"3732\",\"type\":\"CategoricalTicker\"},{\"attributes\":{\"factors\":[\"Pfizer\",\"Moderna\",\"Janssen\",\"Johnson&Johnson\",\"Sinopharm\",\"Vero Cell\",\"Sputnik V\",\"Sinovac\"],\"tags\":[[[\"index\",\"index\",null]]]},\"id\":\"3719\",\"type\":\"FactorRange\"},{\"attributes\":{\"callback\":null,\"renderers\":[{\"id\":\"3758\"}],\"tags\":[\"hv_created\"],\"tooltips\":[[\"index\",\"@{index}\"],[\"Variable\",\"@{Variable}\"],[\"value\",\"@{value}\"]]},\"id\":\"3721\",\"type\":\"HoverTool\"},{\"attributes\":{},\"id\":\"3753\",\"type\":\"Selection\"},{\"attributes\":{\"children\":[{\"id\":\"3816\"},{\"id\":\"3818\"}],\"margin\":[0,0,0,0],\"name\":\"Column08175\"},\"id\":\"3815\",\"type\":\"Column\"},{\"attributes\":{\"child\":{\"id\":\"3801\"},\"name\":\"Column08162\",\"title\":\"COVID-19 Forecast\"},\"id\":\"3814\",\"type\":\"Panel\"},{\"attributes\":{\"overlay\":{\"id\":\"3743\"}},\"id\":\"3741\",\"type\":\"BoxZoomTool\"},{\"attributes\":{\"data\":{\"Variable\":[\"positive\",\"positive\",\"positive\",\"positive\",\"positive\",\"positive\",\"positive\",\"positive\",\"negative\",\"negative\",\"negative\",\"negative\",\"negative\",\"negative\",\"negative\",\"negative\"],\"bottom\":{\"__ndarray__\":\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAM3MzMzMzLw/IEHxY8xduz+jAbwFEhSvP60cWmQ7368/qoJRSZ2Apj++wRcmUwWzP4QvTKYKRrU/sgxxrIvbqD8=\",\"dtype\":\"float64\",\"order\":\"little\",\"shape\":[16]},\"index\":[\"Pfizer\",\"Moderna\",\"Janssen\",\"Johnson&Johnson\",\"Sinopharm\",\"Vero Cell\",\"Sputnik V\",\"Sinovac\",\"Pfizer\",\"Moderna\",\"Janssen\",\"Johnson&Johnson\",\"Sinopharm\",\"Vero Cell\",\"Sputnik V\",\"Sinovac\"],\"top\":{\"__ndarray__\":\"zczMzMzMvD8gQfFjzF27P6MBvAUSFK8/rRxaZDvfrz+qglFJnYCmP77BFyZTBbM/hC9MpgpGtT+yDHGsi9uoP/JBz2bV58Y/o5I6AU2ExT9n1edqK/bDPwYSFD/G3MU/iWNd3EYDsD/aPXlYqDW9P4Lix5i7lsA/1QloImx4uj8=\",\"dtype\":\"float64\",\"order\":\"little\",\"shape\":[16]},\"value\":{\"__ndarray__\":\"zczMzMzMvD8gQfFjzF27P6MBvAUSFK8/rRxaZDvfrz+qglFJnYCmP77BFyZTBbM/hC9MpgpGtT+yDHGsi9uoPxe30QDeArE/S8gHPZtVrz/8qfHSTWK4P7UV+8vuybs/z4jS3uALkz84+MJkqmCkPwIrhxbZzqc/+AZfmEwVrD8=\",\"dtype\":\"float64\",\"order\":\"little\",\"shape\":[16]}},\"selected\":{\"id\":\"3753\"},\"selection_policy\":{\"id\":\"3769\"}},\"id\":\"3752\",\"type\":\"ColumnDataSource\"},{\"attributes\":{\"align\":\"center\",\"children\":[{\"id\":\"3812\"}],\"margin\":[0,0,0,0],\"name\":\"Row08160\"},\"id\":\"3811\",\"type\":\"Row\"},{\"attributes\":{\"label\":{\"field\":\"Variable\"},\"renderers\":[{\"id\":\"3758\"}]},\"id\":\"3771\",\"type\":\"LegendItem\"},{\"attributes\":{\"bottom_units\":\"screen\",\"fill_alpha\":0.5,\"fill_color\":\"lightgrey\",\"left_units\":\"screen\",\"level\":\"overlay\",\"line_alpha\":1.0,\"line_color\":\"black\",\"line_dash\":[4,4],\"line_width\":2,\"right_units\":\"screen\",\"syncable\":false,\"top_units\":\"screen\"},\"id\":\"3743\",\"type\":\"BoxAnnotation\"},{\"attributes\":{},\"id\":\"3729\",\"type\":\"LinearScale\"},{\"attributes\":{\"bottom\":{\"field\":\"bottom\"},\"fill_alpha\":{\"value\":0.2},\"fill_color\":{\"field\":\"Variable\",\"transform\":{\"id\":\"3751\"}},\"line_alpha\":{\"value\":0.2},\"top\":{\"field\":\"top\"},\"width\":{\"value\":0.8},\"x\":{\"field\":\"index\"}},\"id\":\"3757\",\"type\":\"VBar\"},{\"attributes\":{\"children\":[{\"id\":\"3819\"}],\"margin\":[0,0,0,0],\"name\":\"Row08174\"},\"id\":\"3818\",\"type\":\"Row\"},{\"attributes\":{\"axis\":{\"id\":\"3734\"},\"dimension\":1,\"grid_line_color\":null,\"ticker\":null},\"id\":\"3737\",\"type\":\"Grid\"},{\"attributes\":{\"margin\":[5,5,5,5],\"name\":\"Str08157\"},\"id\":\"3813\",\"type\":\"panel.models.markup.HTML\"},{\"attributes\":{\"align\":\"center\",\"children\":[{\"id\":\"3715\"},{\"id\":\"3716\"}],\"margin\":[0,0,0,0],\"name\":\"Column08930\"},\"id\":\"3714\",\"type\":\"Column\"},{\"attributes\":{\"axis\":{\"id\":\"3731\"},\"grid_line_color\":null,\"ticker\":null},\"id\":\"3733\",\"type\":\"Grid\"},{\"attributes\":{\"data_source\":{\"id\":\"3752\"},\"glyph\":{\"id\":\"3755\"},\"hover_glyph\":null,\"muted_glyph\":{\"id\":\"3757\"},\"nonselection_glyph\":{\"id\":\"3756\"},\"selection_glyph\":{\"id\":\"3772\"},\"view\":{\"id\":\"3759\"}},\"id\":\"3758\",\"type\":\"GlyphRenderer\"},{\"attributes\":{},\"id\":\"3740\",\"type\":\"WheelZoomTool\"},{\"attributes\":{\"client_comm_id\":\"7eb6bf666dc3401cb0127f65f8ed932b\",\"comm_id\":\"144223383e9e4952a73159457e7688b7\",\"plot_id\":\"3713\"},\"id\":\"3848\",\"type\":\"panel.models.comm_manager.CommManager\"},{\"attributes\":{\"high\":15,\"low\":1,\"margin\":[5,10,5,10],\"mode\":\"int\",\"placeholder\":\"0\",\"title\":\"Batch Size\",\"value\":1,\"value_throttled\":1},\"id\":\"3806\",\"type\":\"Spinner\"}],\"root_ids\":[\"3713\",\"3848\"]},\"title\":\"Bokeh Application\",\"version\":\"2.3.2\"}};\n",
       "    var render_items = [{\"docid\":\"49c47fb5-74cf-42f8-8055-d1b8e3ab0df9\",\"root_ids\":[\"3713\"],\"roots\":{\"3713\":\"fce8810f-084e-4a52-b55a-8391b734cddb\"}}];\n",
       "    root.Bokeh.embed.embed_items_notebook(docs_json, render_items);\n",
       "  }\n",
       "  if (root.Bokeh !== undefined && root.Bokeh.Panel !== undefined && root['Plotly'] !== undefined ) {\n",
       "    embed_document(root);\n",
       "  } else {\n",
       "    var attempts = 0;\n",
       "    var timer = setInterval(function(root) {\n",
       "      if (root.Bokeh !== undefined && root.Bokeh.Panel !== undefined && root['Plotly'] !== undefined) {\n",
       "        clearInterval(timer);\n",
       "        embed_document(root);\n",
       "      } else if (document.readyState == \"complete\") {\n",
       "        attempts++;\n",
       "        if (attempts > 100) {\n",
       "          clearInterval(timer);\n",
       "          console.log(\"Bokeh: ERROR: Unable to run BokehJS code because BokehJS library is missing\");\n",
       "        }\n",
       "      }\n",
       "    }, 10, root)\n",
       "  }\n",
       "})(window);</script>"
      ],
      "text/plain": [
       "WidgetBox\n",
       "    [0] Column(align='center')\n",
       "        [0] Markdown(str)\n",
       "        [1] WidgetBox\n",
       "            [0] Tabs\n",
       "                [0] Row\n",
       "                    [0] HoloViews(Bars)\n",
       "                [1] Column(align='center')\n",
       "                    [0] Row(align='center')\n",
       "                        [0] IntInput(end=30, name='How many days window', start=7, value=7)\n",
       "                        [1] IntInput(end=1000, name='Epochs', start=100, step=100, value=10)\n",
       "                    [1] Row(align='center')\n",
       "                        [0] IntInput(end=15, name='Batch Size', start=1, value=1)\n",
       "                        [1] IntInput(end=1000, name='Units', start=0, step=10, value=50)\n",
       "                    [2] Row(align='center')\n",
       "                        [0] Select(name='Country:', options=['Afghanistan', ...], value='Afghanistan')\n",
       "                        [1] Select(name='Prediction of...:', options=['---', 'Cases', ...], value='---')\n",
       "                    [3] Row(align='center')\n",
       "                        [0] ParamFunction(function)\n",
       "                [2] Column\n",
       "                    [0] Row\n",
       "                        [0] IntInput(end=30, name='How many days o..., start=0, step=3, value=7)\n",
       "                    [1] ParamFunction(function)"
      ]
     },
     "execution_count": 34,
     "metadata": {
      "application/vnd.holoviews_exec.v0+json": {
       "id": "3713"
      }
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "title = \"#COVID Forecast Dasboard\"\n",
    "welcome = \"This Dashboard provide the function of building and training model for Covid cases/Vacination Projection\"\n",
    "\n",
    "# Create a layout for the dashboard\n",
    "\n",
    "sentiment_data_row = pn.Row(create_sentiment_plot(vaccine_array, 'en'))\n",
    "\n",
    "\n",
    "dashboard = pn.WidgetBox(pn.Column(title,\n",
    "                        pn.WidgetBox(pn.Tabs(    \n",
    "                            (\"Sentimment toward Vacine types\", sentiment_data_row),\n",
    "                            (\"COVID-19 Forecast\", model_configuration_input),\n",
    "                            (\"Prediction\", prediction)\n",
    "                            )), align=\"center\"))\n",
    "\n",
    "dashboard.servable()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:pyvizenv] *",
   "language": "python",
   "name": "conda-env-pyvizenv-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
